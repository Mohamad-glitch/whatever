from typing import Optional

from pydantic import BaseModel
from sqlmodel import Field, SQLModel, Relationship


class CropBase(SQLModel):# clint can access it
    name : str = Field(index=True)
    growth_percent: int = Field(default=0, index=True)
    harvest_ready: bool = Field(default=False, index=True)



class Crop(CropBase, table=True): # this is the ORM model and not Accessible by the clint
    id: int | None =  Field(default=None, primary_key=True)
    farm_id: int = Field(foreign_key="farm.id")
    # Relationship to Farm
    farm: Optional["Farm"] = Relationship(back_populates="crops")



class CropPublic(CropBase):# clint can access it
    id: int
    farm_id: int


class CropCreate(CropBase):#this for creating new farm the id will be generated by DB
    pass


class CropUpdate(CropBase):
    name: Optional[str] = None
    growth_percent: Optional[int] = None
    harvest_ready: Optional[bool] = None

class CropNameUpdate(BaseModel):
    name : str
